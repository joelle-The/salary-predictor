import streamlit as st
import pandas as pd
import numpy as np
import joblib

model = joblib.load('model.pkl')

st.title("Adult Income Prediction")
st.info("This app predicts whether an individual earns more than $50,000 per year based on demographic data.")
with st.expander("View Dataset"):
    st.write("Dataset: Adult Income")
    st.write("This dataset contains demographic information about individuals, including age, education, occupation, and income level.")
    df1 = pd.read_csv('adult.csv')
    df1 = df1.drop(columns=['fnlwgt', 'education-num'])
    df1

    st.write("**X**")
    X_raw = df1.drop('target', axis=1)
    X_raw

    st.write("**y**")
    y_raw = df1.target
    y_raw
with st.expander("View Model"):
    st.bar_chart(data=df1, x='age', y='hours-per-week', color='target')

with st.sidebar:
    st.header("Input Features")

    age = st.slider("Age", 17, 90, 35, help="Your current age")

    workclass = st.selectbox("Work Class", [
        'Private', 'Self-emp-not-inc', 'Self-emp-inc', 'Federal-gov',
        'Local-gov', 'State-gov', 'Without-pay', 'Never-worked'
    ], help="Type of employment")

    education = st.selectbox("Education Level", [
        'Bachelors', 'Some-college', '11th', 'HS-grad', 'Prof-school',
        'Assoc-acdm', 'Assoc-voc', '9th', '7th-8th', '12th', 'Masters',
        '1st-4th', '10th', 'Doctorate', '5th-6th', 'Preschool'
    ], help="Highest education level achieved")

    # education_mapping = {
    #     'Preschool': 1, '1st-4th': 2, '5th-6th': 3, '7th-8th': 4,
    #     '9th': 5, '10th': 6, '11th': 7, '12th': 8, 'HS-grad': 9,
    #     'Some-college': 10, 'Assoc-voc': 11, 'Assoc-acdm': 12,
    #     'Bachelors': 13, 'Prof-school': 14, 'Masters': 15, 'Doctorate': 16
    # }
    # education_num = education_mapping[education]

    occupation = st.selectbox("Occupation", [
        'Tech-support', 'Craft-repair', 'Other-service', 'Sales',
        'Exec-managerial', 'Prof-specialty', 'Handlers-cleaners',
        'Machine-op-inspct', 'Adm-clerical', 'Farming-fishing',
        'Transport-moving', 'Priv-house-serv', 'Protective-serv', 'Armed-Forces'
    ], help="Your primary occupation")

    relationship = st.selectbox("Relationship Status", [
        'Wife', 'Own-child', 'Husband', 'Not-in-family',
        'Other-relative', 'Unmarried'
    ], help="Relationship status")

    race = st.selectbox("Race", [
        'White', 'Asian-Pac-Islander', 'Amer-Indian-Eskimo', 'Other', 'Black'
    ])

    sex = st.selectbox("Sex", ['Female', 'Male'])

    hours_per_week = st.slider("Hours per Week", 1, 99, 40, help="Average hours worked per week")

    capital_gain = st.slider("Capital Gain", 0, 99999, 0, help="Investment income, if any")

    capital_loss = st.slider("Capital Loss", 0, 4356, 0, help="Investment losses, if any")

    marital_status = st.selectbox("Marital Status", [
        'Married-civ-spouse', 'Divorced', 'Never-married',
        'Separated', 'Widowed', 'Married-spouse-absent'
    ], help="Your current marital status")

    native_country = st.selectbox("Native Country", [
        'United-States', 'Cambodia', 'England', 'Puerto-Rico', 'Canada',
        'Germany', 'Outlying-US(Guam-USVI-etc)', 'India', 'Japan',
        'Greece', 'South', 'China', 'Cuba', 'Iran', 'Honduras',
        'Philippines', 'Italy', 'Poland', 'Jamaica', 'Vietnam',
        'Mexico', 'Portugal', 'Ireland', 'France', 'Dominican-Republic',
        'Laos', 'Ecuador', 'Taiwan', 'Haiti', 'Columbia',
        'Hungary', 'Guatemala', 'Nicaragua', 'Scotland',
        'Thailand', 'Yugoslavia', 'El-Salvador', 'Trinadad&Tobago',
        'Peru', 'Hong', 'Holand-Netherlands'
    ], help="Country of birth")

    data = {
        'age': age,
        'workclass': workclass,
        'education': education,
        # 'education-num': education_num,
        'marital-status': marital_status,   
        'occupation': occupation,
        'relationship': relationship,
        'race': race,
        'sex': sex,
        'capital-gain': capital_gain,
        'capital-loss': capital_loss,
        'hours-per-week': hours_per_week,
        'native-country': native_country
    }
    input_df = pd.DataFrame(data, index=[0])
    input_adult = pd.concat([input_df, X_raw], axis=0)

with st.expander("Input features"):
    st.write("Input DataFrame:")
    input_df
    # st.write("Combined DataFrame:")
    # input_adult

encode = ['workclass', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'native-country', 'education']
df_adult = pd.get_dummies(input_adult, prefix=encode)

X = df_adult[1:]
input_row = df_adult [:1]

target_mapper = {
    ' <=50K': 0,
    ' >50K': 1
}

def target_encode(val):
    return target_mapper.get(val)

y = y_raw.apply(target_encode)

with st.expander("Data Preparation"):
    st.write("Encoded Input Adult (X)")
    input_row
    # st.write("Encoded Target (y)")
    # y

clf = model
clf.fit(X, y)

prediction = model.predict(input_row)
prediction_proba = model.predict_proba(input_row)

df1_prediction_proba = pd.DataFrame(prediction_proba)
#prediction_proba.rename(columns={0: ' <=50K', 1: ' >50K'}, inplace=True)
df1_prediction_proba.columns = ['≤ $50K', '> $50K']


st.subheader("Predicted Salary")
st.dataframe(df1_prediction_proba, column_config= {
    '≤ $50K': st.column_config.ProgressColumn(
        'Probability ≤ $50K',
        format='%f',
        width='medium',
        min_value=0.0,
        max_value=1.0
    ),
    '> $50K': st.column_config.ProgressColumn(
        'Probability > $50K',
        format='%f',
        width='medium',
        min_value=0.0,
        max_value=1.0
    )
}, hide_index=True)

adult_salary = np.array(['≤ $50K', '> $50K'])
st.success(str(adult_salary[prediction[0]]))
